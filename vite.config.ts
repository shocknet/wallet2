/// <reference types="vitest/config" />
import react from '@vitejs/plugin-react'
import legacy from "@vitejs/plugin-legacy"
import { resolve } from 'path';
import { defineConfig } from 'vite'
import eslint from 'vite-plugin-eslint';
import { VitePWA } from 'vite-plugin-pwa'
import { visualizer } from 'rollup-plugin-visualizer';

// Check if this is native or web build
const isNativeBuild = process.env.CAPACITOR_PLATFORM === 'android' || process.env.CAPACITOR_PLATFORM === 'ios'


export default defineConfig({
	define: {
		__WEB_APP_VERSION__: JSON.stringify(process.env.WEB_APP_VERSION || '0.0.0.'),
		__WEB_APP_VERSION_CODE__: JSON.stringify(process.env.WEB_APP_VERSION_CODE || "0")
	},
	plugins: [
		react(),
		eslint({
			failOnError: false,
			failOnWarning: false
		}),
		VitePWA({
			selfDestroying: isNativeBuild,
			registerType: 'autoUpdate',
			strategies: "injectManifest",
			srcDir: "src",
			filename: "sw.ts",
			injectManifest: {
				globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],
			},
			manifest: {
				name: 'Shockwallet',
				short_name: 'App',
				description: 'Lightning for Everyone',
				theme_color: '#29abe2',
				background_color: '#16191c',
				icons: [
					{
						src: 'pwa-64x64.png',
						sizes: '64x64',
						type: 'image/png',
						purpose: 'any'
					},
					{
						src: 'pwa-192x192.png',
						sizes: '192x192',
						type: 'image/png',
						purpose: 'any'
					},
					{
						src: 'pwa-512x512.png',
						sizes: '512x512',
						type: 'image/png',
						purpose: 'any'
					},
					{
						src: '/pwa-maskable-192x192.png',
						sizes: '192x192',
						type: 'image/png',
						purpose: 'maskable'
					},
					{
						src: '/pwa-maskable-512x512.png',
						sizes: '512x512',
						type: 'image/png',
						purpose: 'maskable'
					}
				]
			},
		}),
		legacy({
			renderLegacyChunks: false,
			modernPolyfills: true,
		}),
	],
	build: {
		rollupOptions: {
			plugins: [
				visualizer({
					open: true,
					gzipSize: true,
					brotliSize: true,
					filename: 'bundle-report.html',
				}),
			],

			output: {
				manualChunks(id) {
					if (id.includes('commonjsHelpers')) return 'commonjsHelpers'

					if (id.includes('/autogenerated/')) return 'protobuf';
					if (id.includes('/Assets/')) return 'assets'


					if (!id.includes('node_modules')) return



					// React core ecosystem
					if (
						id.includes('/react/') ||
						id.includes('/react-dom/') ||
						id.includes('/scheduler/') ||
						id.includes('/react-is/') ||
						id.includes('/use-sync-external-store/') ||
						id.includes('/hoist-non-react-statics/') ||
						id.includes('/prop-types/') ||
						id.includes('/react-router/') ||
						id.includes('/history/') ||
						id.includes('/redux/') ||
						id.includes('/redux-thunk/') ||
						id.includes('/react-redux/') ||
						id.includes('/redux-persist/') ||
						id.includes('/@reduxjs/toolkit') ||
						id.includes('/reselect/')

					) return 'react-core';


					// Vendor catch-all
					const [, pkgPath] = id.split(/node_modules[/\\]/);
					const parts = pkgPath.split(/[/\\]/);
					const pkgName = parts[0].startsWith('@')
						? `${parts[0]}/${parts[1]}`
						: parts[0];
					return `vendor-${pkgName.replace('/', '-')}`;
				}
			},
		},
	},
	test: {
		environment: "jsdom",
		setupFiles: "./testSetup.ts"
	},
	server: {
		host: true,
		port: 8100,
	},
	// Add this section to handle SPA routing for PWA
	preview: {
		port: 8080,
	},
	resolve: {
		alias: {
			"@": resolve(__dirname, "src"),
		},
		dedupe: ['react', 'react-dom', 'react-is', 'scheduler', 'use-sync-external-store']
	},
})
