import { toast } from "react-toastify";
import * as Icons from "../../Assets/SvgIconLibrary";
import { Clipboard } from "@capacitor/clipboard";
import React, { useEffect, useState } from "react";
import BootstrapSource from "../../Assets/Images/bootstrap_source.jpg";
import { useSelector, selectConnectedNostrSpends } from '../../State/store/store';
import { PayTo } from "../../globalTypes";
import { getNostrClient } from "@/Api/nostr";
import * as Types from '../../Api/pub/autogenerated/ts/types'
import { IonIcon, useIonRouter } from "@ionic/react";
import { trashOutline } from "ionicons/icons";
type OfferItemType = {
	title: string;
	value: string;
	type: string;
};

const Management = () => {
	const router = useIonRouter();
	const enabledPaySources = useSelector(selectConnectedNostrSpends);


	const [isEdit, setIsEdit] = useState<boolean>(false);

	const [showDropDown, setShowDropDown] = useState<boolean>(false);
	const [allValue, setAllValue] = useState<PayTo[]>(enabledPaySources);

	const [display, setDisplay] = useState(0);
	const [rotation, setRotation] = useState(0);
	const [value, setValue] = useState<PayTo>(enabledPaySources[0]);
	const [remainValues, setRemailValues] = useState<PayTo[]>([]);

	const [displayData, setDisplayData] = useState<PayTo>();
	const [offerValue, setOfferValue] = useState<string>("");
	const [manageAuths, setManageAuths] = useState<Types.ManageAuthorization[]>([]);
	const [nmanage, setNmanage] = useState<string>("");

	useEffect(() => {
		setShowDropDown(showDropDown);
	}, [showDropDown]);

	const fetchManageAuths = async () => {
		const client = await getNostrClient(value.pasteField, value.keys)
		const res = await client.GetManageAuthorizations()
		if (res.status === "OK") {
			setManageAuths(res.manages)
		} else {
			toast.error(res.reason)
		}
	}

	const fetchUserInfo = async () => {
		const client = await getNostrClient(value.pasteField, value.keys)
		const res = await client.GetUserInfo()
		if (res.status === "OK") {
			setNmanage(res.nmanage)
		} else {
			toast.error(res.reason)
		}
	}

	useEffect(() => {
		setDisplayData(value)
		fetchManageAuths()
		fetchUserInfo()
	}, [value]);

	const dropdown = () => {
		const remainValues = allValue.filter((e) => e.label !== value.label);
		setRemailValues(remainValues);
		setDisplay(display === 0 ? 1 : 0);
		setRotation(rotation === 0 ? 90 : 0);
	};

	const arrangeIcon = (value?: string, sourcePub?: string) => {
		console.log(value, sourcePub)
		switch (value) {
			case "0":
				return (
					<React.Fragment>
						<img
							src={BootstrapSource}
							width="23px"
							alt="Avatar"
							style={{ borderRadius: "50%" }}
						/>
					</React.Fragment>
				);
			case "1":
				return Icons.mynodeSmall();

			case "2":
				return Icons.uncleSmall();

			case "3":
				return Icons.lightningSmall();

			case "4":
				return Icons.zbdSmall();

			case "5":
				return Icons.stackerSmall();

			default:
				if (sourcePub) {
					return (
						<React.Fragment>
							<img
								src={`https://robohash.org/${sourcePub}.png?bgset=bg1`}
								width="23px"
								alt="Avatar"
								style={{ borderRadius: "50%" }}
							/>
						</React.Fragment>
					);
				}
				if (!value?.includes("http")) {
					value = "http://www.google.com/s2/favicons?sz=64&domain=" + value;
				}
				return (
					<React.Fragment>
						<img
							src={value}
							width="23px"
							alt=""
							style={{ borderRadius: "50%" }}
						/>
					</React.Fragment>
				);
		}
	};

	const selectOption = (id: PayTo) => {
		dropdown();
		setValue(id);
	};

	const CopyToClipboard = async (copyText: string) => {
		let clipbaordStr = "";
		clipbaordStr = copyText;
		await Clipboard.write({
			string: clipbaordStr,
		});
		toast.success("Copied to clipboard");
	};

	const removeManageAuth = async (npub: string) => {
		console.log("removing manage auth", npub)
		const client = await getNostrClient(value.pasteField, value.keys)
		const res = await client.ResetManage({ npub })
		if (res.status === "OK") {
			fetchManageAuths()
		} else {
			toast.error(res.reason)
		}
	}

	return (
		<div className="Offers_container">
			<div className="Offers">
				<div className="Offers_header_text">Manage Authorizations</div>
				<div className="Offers_item" onClick={dropdown}>
					<div className="selected_item">
						{value ? (
							<div className="item" key={value.label}>
								{arrangeIcon(value.icon, value.pubSource ? value.id.split("-")[0] : undefined)}
								<div className="Offers_from_value">{value.label}</div>
							</div>
						) : (
							<div></div>
						)}
						<div
							className="offers_dropdown"
							style={{
								opacity: display,
								transition: "0.3s",
								overflow: "hidden",
							}}
						>
							{display === 1 &&
								remainValues.map((item: PayTo) => {
									return (
										<div
											onClick={() => {
												selectOption(item);
											}}
											className="item"
											key={item.label}
										>
											{arrangeIcon(item.icon, item.pubSource ? item.id.split("-")[0] : undefined)}
											<div className="Offers_from_value">{item.label}</div>
										</div>
									);
								})}
						</div>
					</div>
					<div
						className="RightIcon"
						style={{
							transform: `rotate(${rotation}deg)`,
							transition: "0.3s",
						}}
					>
						{Icons.arrow()}
					</div>
				</div>
				<p style={{ fontSize: "12px", color: "gray" }}> {nmanage} </p>
				{manageAuths.map(((o, i) => <div key={i} className="Offers_source">
					<div className="source_header">
						<div className="title">{o.npub}</div>
						<IonIcon icon={trashOutline} onClick={() => removeManageAuth(o.npub)} />
					</div>
					<div className="source_data">is {o.authorized ? "authorized" : "not authorized"}</div>
				</div>))}
			</div>
		</div>
	);
};

export default Management;
