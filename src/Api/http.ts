import { HTTP_AUTH_TOKEN_STORAGE_KEY } from '../constants'
import NewHttpClient from './autogenerated/ts/http_client'
export const setAuthToken = (token: string) => {
    localStorage.setItem(HTTP_AUTH_TOKEN_STORAGE_KEY, token)
}
export const getAuthToken = () => {
    return localStorage.getItem(HTTP_AUTH_TOKEN_STORAGE_KEY)
}

const clients: Record<string, ReturnType<typeof NewHttpClient>> = {}
export const getHttpClient = (url: string, { adminToken, metricsToken }: { adminToken?: string, metricsToken?: string } = {}) => {
    const existing = clients[url]
    if (existing) {
        return existing
    }
    const c = NewHttpClient({
        baseUrl: url,
        retrieveGuestAuth: async () => { return "" },
        retrieveMetricsAuth: async () => { return metricsToken || "" },
        retrieveAdminAuth: async () => { return adminToken || "" },
        retrieveAppAuth: async () => { throw new Error("application routes not enabled") },
        retrieveUserAuth: async () => { return getAuthToken() },
        encryptCallback: async () => { throw new Error("encryption not enabled") },
        decryptCallback: async () => { throw new Error("encryption not enabled") },
        deviceId: "",
    })
    clients[url] = c
    return c
}