// This file was autogenerated from a .proto file, DO NOT EDIT!

export type ResultError = { status: 'ERROR', reason: string }
export type RequestInfo = { rpcName: string, batch: boolean, nostr: boolean, batchSize: number }
export type RequestStats = { startMs:number, start:bigint, parse: bigint, guard: bigint, validate: bigint, handle: bigint }
export type RequestMetric = AuthContext & RequestInfo & RequestStats & { error?: string }
export type GuestContext = {
}
export type GuestMethodInputs = GetOrCreateVanityName_Input
export type GuestMethodOutputs = GetOrCreateVanityName_Output
export type AuthContext = GuestContext

export type GetOrCreateVanityName_Input = {rpcName:'GetOrCreateVanityName', req: GetOrCreateVanityNameRequest}
export type GetOrCreateVanityName_Output = ResultError | ({ status: 'OK' } & GetOrCreateVanityNameResponse)

export type ServerMethods = {
    GetOrCreateVanityName?: (req: GetOrCreateVanityName_Input & {ctx: GuestContext }) => Promise<GetOrCreateVanityNameResponse>
}


export type OptionsBaseMessage = {
    allOptionalsAreSet?: true
}

export type Empty = {
}
export const EmptyOptionalFields: [] = []
export type EmptyOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
}
export const EmptyValidate = (o?: Empty, opts: EmptyOptions = {}, path: string = 'Empty::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    return null
}

export type GetOrCreateVanityNameRequest = {
    k1: string
}
export const GetOrCreateVanityNameRequestOptionalFields: [] = []
export type GetOrCreateVanityNameRequestOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    k1_CustomCheck?: (v: string) => boolean
}
export const GetOrCreateVanityNameRequestValidate = (o?: GetOrCreateVanityNameRequest, opts: GetOrCreateVanityNameRequestOptions = {}, path: string = 'GetOrCreateVanityNameRequest::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.k1 !== 'string') return new Error(`${path}.k1: is not a string`)
    if (opts.k1_CustomCheck && !opts.k1_CustomCheck(o.k1)) return new Error(`${path}.k1: custom check failed`)

    return null
}

export type GetOrCreateVanityNameResponse = {
    vanity_name: string
}
export const GetOrCreateVanityNameResponseOptionalFields: [] = []
export type GetOrCreateVanityNameResponseOptions = OptionsBaseMessage & {
    checkOptionalsAreSet?: []
    vanity_name_CustomCheck?: (v: string) => boolean
}
export const GetOrCreateVanityNameResponseValidate = (o?: GetOrCreateVanityNameResponse, opts: GetOrCreateVanityNameResponseOptions = {}, path: string = 'GetOrCreateVanityNameResponse::root.'): Error | null => {
    if (opts.checkOptionalsAreSet && opts.allOptionalsAreSet) return new Error(path + ': only one of checkOptionalsAreSet or allOptionalNonDefault can be set for each message')
    if (typeof o !== 'object' || o === null) return new Error(path + ': object is not an instance of an object or is null')

    if (typeof o.vanity_name !== 'string') return new Error(`${path}.vanity_name: is not a string`)
    if (opts.vanity_name_CustomCheck && !opts.vanity_name_CustomCheck(o.vanity_name)) return new Error(`${path}.vanity_name: custom check failed`)

    return null
}

