import { emptyCursor, parseOperationsResponse } from './helpers';
import type { AppThunk } from '@/State/store/store';
import { getNostrClient } from '@/Api/nostr';
import type { UserOperation } from '@/Api/pub/autogenerated/ts/types';

import { refreshSourceInfo } from '../metadata/thunks';

import { NprofileView, selectHealthyNprofileViews } from '../selectors';
import { selectCursorForSource, sourcesActions } from '../slice';






// Fetches all pub sources history
export function fetchAllSourcesHistory(): AppThunk<Promise<void>> {
	return async (dispatch, getState) => {
		const nprofileViews = selectHealthyNprofileViews(getState());
		await Promise.all(nprofileViews.map(source => {
			return dispatch(fetchHistoryForSource(source))
		}))
	}
}



// Fetches history for a single source
export const fetchHistoryForSource = (source: NprofileView): AppThunk<void> => {
	return async (dispatch, getState) => {

		dispatch(refreshSourceInfo(source));

		const client = await getNostrClient({ pubkey: source.lpk, relays: source.relays }, source.keys);
		const newOps: UserOperation[] = [];

		let needMore = true;
		let populatedCursor = selectCursorForSource(getState(), source.sourceId) ?? emptyCursor();

		while (needMore) {
			const res = await client.GetUserOperations(populatedCursor);
			if (res.status !== "OK") throw new Error(res.reason);

			const { newCursor, operations, needMoreData } = parseOperationsResponse(res, populatedCursor);
			newOps.push(...operations);
			populatedCursor = newCursor;
			needMore = needMoreData;
		}

		dispatch(sourcesActions.mergePage({ sourceId: source.sourceId, operations: newOps, newCursor: populatedCursor }))
	};
};





export const listenforNewOperations = (): AppThunk<void> => {
	return async (dispatch, getState) => {
		const nprofileViews = selectHealthyNprofileViews(getState());
		await Promise.all(nprofileViews.map(source => {
			return dispatch(listenForSourceNewOperations(source))
		}))
	}
}



const listenForSourceNewOperations = (source: NprofileView): AppThunk<void> => {
	return async (dispatch) => {
		const client = await getNostrClient({ pubkey: source.lpk, relays: source.relays }, source.keys);
		client.GetLiveUserOperations(newOp => {
			if (newOp.status === "OK") {
				dispatch(refreshSourceInfo(source));
				dispatch(sourcesActions.ingestLive({ sourceId: source.sourceId, operation: newOp.operation }));
			} else {
				console.error("Get live user operation error", newOp.reason)
			}
		})
	}
}

