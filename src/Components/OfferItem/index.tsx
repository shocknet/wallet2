import { IonButton, IonChip, IonCol, IonGrid, IonIcon, IonItem, IonLabel, IonNote, IonRow, IonText } from "@ionic/react";
import { useDispatch } from "@/State/store/store";
import styles from "./styles/index.module.scss";
import { formatSatoshi } from "@/lib/units";
import { truncateTextMiddle } from "@/lib/format";
import { OfferConfig } from "@/Api/pub/autogenerated/ts/types";
import { chevronForward, copyOutline, trash } from "ionicons/icons";
import classNames from "classnames";
import { Satoshi } from "@/lib/types/units";
import { highlightUrlTemplate } from "../Modals/OfferInfoModal/WebhookBuilder/utils/jsxHelpers";
import { copyToClipboard } from "@/State/thunks/copyToClipboard";
import { useToast } from "@/lib/contexts/useToast";
import { useAlert } from "@/lib/contexts/useAlert";




interface OfferItemProps {
	offer: OfferConfig & { sourceId: string };
	handleSelectOffer: (operation: OfferConfig) => void;
	onDelete: (offerId: string) => Promise<void>
}

const OfferItem = ({ offer, handleSelectOffer, onDelete }: OfferItemProps) => {
	const dispatch = useDispatch();
	const { showToast } = useToast();
	const { showAlert } = useAlert();


	const handleItemClick = () => {
		handleSelectOffer(offer);
	}

	const copy = () => {
		dispatch(copyToClipboard(offer.noffer, showToast))
	}

	const handleDelete = () => {
		showAlert({
			header: "Delete offer",
			subHeader: "Are you sure you wish to delete this offer?",
			message: "This action cannot be reversed!",
			cssClass: "danger-alert",
			buttons: [
				{
					text: "Cancel",
					cssClass: "danger-alert-button-cancel",
					role: "cancel",
				},
				{
					text: "Delete",
					cssClass: "danger-alert-button-confirm",
					handler: () => {
						onDelete(offer.offer_id);
					}
				},

			]
		});
	};

	return (


		<IonItem className={styles["offer-item"]} detail={false} button onClick={handleItemClick}>
			<IonLabel>
				<IonGrid>
					<IonRow className="ion-nowrap">
						<IonCol size="8" sizeXs="6" className="ion-text-start">
							<IonText className={styles["offer-item-label"]}>{offer.label}</IonText>
						</IonCol>
						<IonCol size="4" sizeXs="6">
							<IonRow className="ion-justify-content-end ion-nowrap ion-align-items-center">
								<IonCol size="auto">
									<IonButton fill="clear" className={styles["offer-item-copy-button"]} onClick={(e) => {
										e.stopPropagation();
										handleDelete();
									}}>
										<IonIcon color="danger" icon={trash} slot="icon-only" />
									</IonButton>
								</IonCol>
								<IonCol size="auto" style={{ marginLeft: "1rem" }}>
									<IonIcon color="medium" icon={chevronForward}></IonIcon>
								</IonCol>
							</IonRow>
						</IonCol>
					</IonRow>
					<IonRow className="ion-nowrap ion-text-nowrap">
						<IonCol size="auto" className={styles["offer-item-chips-container"]}>
							{
								offer.price_sats === 0 ? (
									<IonChip color="primary">
										<IonLabel className={styles["chip-label"]}>Spontaneous Payments</IonLabel>
									</IonChip>
								) : (
									<IonChip color="primary">
										<IonLabel className={styles["chip-label"]}>{formatSatoshi(offer.price_sats as Satoshi)} sats</IonLabel>
									</IonChip>
								)
							}
							{
								offer.callback_url && (
									<IonChip color="primary">
										<IonLabel className={styles["chip-label"]}>{highlightUrlTemplate(offer.callback_url)}</IonLabel>
									</IonChip>
								)
							}
						</IonCol>
					</IonRow>
					<IonRow className="ion-justify-content-between ion-align-items-center ion-nowrap ion-margin-top">
						<IonCol size="8">
							<IonNote className={classNames("ion-text-wrap", styles["offer-string"])}>
								{truncateTextMiddle(offer.noffer, 60, 0)}
							</IonNote>
						</IonCol>
						<IonCol size="auto">
							<IonButton fill="clear" className={styles["offer-item-copy-button"]} onClick={(e) => {
								e.stopPropagation();
								copy();
							}}>
								<IonIcon icon={copyOutline} slot="icon-only" />
							</IonButton>
						</IonCol>
					</IonRow>
				</IonGrid>
			</IonLabel>
		</IonItem>


	);
}

export default OfferItem;
