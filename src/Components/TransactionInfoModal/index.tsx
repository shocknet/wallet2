
import styles from "./styles/index.module.scss";
import { TransactionInfo } from "../../Pages/Home";
import { Backdrop } from "../Modals/Modal/Modal.style";
import { motion } from "framer-motion";
import ReactDOM from 'react-dom';
import React, { useEffect, useState } from "react";
import * as Types from '../../Api/autogenerated/ts/types'
import { Price } from "../../State/Slices/usdToBTCSlice";
import moment from "moment";
import classNames from "classnames";
import axios from "axios";
import * as Icons from "../../Assets/SvgIconLibrary";
import * as utility  from '../../Hooks/utility';
import { openNotification } from "../../constants";
import { Clipboard } from '@capacitor/clipboard';

const getRightSideValueString = (amount: number, negative: boolean, price: Price) => {
  return `${negative ? "" : "-"} ${amount} sats`;
}

interface Props {
  operation: TransactionInfo;
  hide: () => void;
  price: Price
}

interface ApiRes {
  fee: number;
	weight: number;
  lastBlock: number;
  blockHeight: number;
}

const TransactionInfoModal = ({ operation, hide, price } : Props) => {
  const onChain = operation.type === Types.UserOperationType.INCOMING_TX || operation.type === Types.UserOperationType.OUTGOING_TX;
  const { internal, amount, inbound, confirmed } = operation;
	const totalFee = operation.service_fee + operation.network_fee;

  const [loading, setLoading] = useState(onChain && !internal);


  const [mempoolres, setmempoolres] = useState<ApiRes>();
	console.log("the operation at modal", operation)



  useEffect(() => {
    const getOnChainTxInfo = async () => {  
			const res = await axios.get(`https://mempool.space/api/tx/${operation.tx_hash}`);
			const { data: lastBlock } = await axios.get("https://mempool.space/api/blocks/tip/height");			
			setmempoolres({ ...res.data, blockHeight: res.data.status.block_height, lastBlock });
			setLoading(false);
			
		}
    if (loading) {
      getOnChainTxInfo();
    }
  }, [loading])

  const modal = 
    <React.Fragment>
      <Backdrop onClick={hide} onTouchEnd={hide} />
      <div
        
        className={styles["wrapper"]}
        
      >
        <motion.div  layoutId={operation.operationId} className={styles["container"]}>
          <motion.div  className={styles["content"]}>
            <div className={styles["header"]}>
              {onChain ? "On-chain Transaction" : "Lightning Transaction"}
            </div>
            {
              loading
              ?
              <div>Loading...</div>
              :
              <div className={styles["info-container"]}>
                <div className={styles["info-item"]}>
                  <span className={styles["left"]}>{operation.inbound ? "Amount received" : "Amount sent"}</span>
                  <span className={styles["right"]}>{getRightSideValueString(amount, inbound, price)}</span>
                </div>
                <div className={styles["info-item"]}>
                  <span className={styles["left"]}>Total fees</span>
                  <span className={styles["right"]}>{getRightSideValueString(onChain && !internal ? mempoolres!.fee : totalFee, true, price)}</span>
                </div>
								{
									(onChain && !internal)
									&&
									<div className={styles["info-item"]}>
										<span className={styles["left"]}>Fee rate</span>
										<span className={styles["right"]}>{((mempoolres!.fee / mempoolres!.weight) * 4).toPrecision(3)} sat/vByte</span>
									</div>

								}

                <div className={styles["info-item"]}>
                  <span className={styles["left"]}>Status</span>
                  <span className={styles["right"]}>{confirmed ? (onChain && !internal ? `${mempoolres!.lastBlock - mempoolres!.blockHeight} confirmations` : "Confirmed") : "Pending"}</span>
                </div>
                <div className={styles["info-item"]}>
                  <span className={styles["left"]}>Date</span>
                  <span className={styles["right"]}>{moment(operation.paidAtUnix * 1000).format('YYYY-MM-DD HH:mm')}</span>
                </div>
                <div className={classNames(styles["info-item"], styles["info-item-databox"])}>
                  <span className={styles["left"]}>Source</span>
									<TextBox text={operation.source}/>
                </div>
                {
                  !onChain
                  &&
                  <div className={classNames(styles["info-item"], styles["info-item-databox"])}>
                    <span className={styles["left"]}>Paid invoice</span>
										<TextBox text={operation.identifier}/>
                  </div>
                }
								{
									(onChain && !internal)
									&&
									<div className={classNames(styles["info-item"], styles["info-item-databox"])}>
                    <span className={styles["left"]}>Txid</span>
										<TextBox text={operation.tx_hash}/>
                  </div>
								}
              </div>
            }
          </motion.div>
        </motion.div>
      </div>
    </React.Fragment>;
  

  return ReactDOM.createPortal(modal, document.body);
};


const TextBox = ({ text }: { text: string }) => {
	
	const [expanded, setExpanded] = useState(false);

	const copyToClip = async () => {
    await Clipboard.write({
      string: text
    }).then(() => {
      utility.setCookie('lastCopiedAddr', text, 1);
    });
    return openNotification("top", "Success", "Copied!");
  };



	return (
		<div
			className={classNames({
				[styles["right"]]: true,
				[styles["data-box"]]: true,
				[styles["expanded"]]: expanded,
			})}
			onClick={() => setExpanded(!expanded)}
		>
			<span className={styles["hover"]} onClick={(e) => {
				e.stopPropagation();
				copyToClip();
			}}>{Icons.copy()}</span>
			<div className={styles["copy-field"]}>{text}</div>
		</div>
	)
}

export default TransactionInfoModal;