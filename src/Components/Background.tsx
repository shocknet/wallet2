import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "../State/store";
import { setLatestOperation, setSourceHistory } from "../State/Slices/HistorySlice";
import { getNostrClient } from "../Api";
import * as Types from '../Api/autogenerated/ts/types'
type Props = {}
export const Background: React.FC<Props> = (): JSX.Element => {

    //reducer
    const nostrSource = useSelector((state) => state.paySource).map((e) => { return { ...e } }).filter((e) => e.pasteField.includes("nprofile"))
    const cursor = useSelector(({ history }) => history.cursor) || {}
    const latestOp = useSelector(({ history }) => history.latestOperation) || {}
    const dispatch = useDispatch();
    const [initialFetch, setInitialFetch] = useState(true)

    useEffect(() => {
        const subbed: string[] = []
        nostrSource.forEach(source => {
            if (subbed.find(s => s === source.pasteField)) {
                return
            }
            subbed.push(source.pasteField)
            getNostrClient(source.pasteField).then(c => {
                c.GetLiveUserOperations(newOp => {
                    if (newOp.status === "OK") {
                        console.log(newOp)
                        dispatch(setLatestOperation({ operation: newOp.operation }))
                    } else {
                        console.log(newOp.reason)
                    }
                })
            })
        })
    }, [])

    useEffect(() => {
        if (Object.entries(latestOp).length === 0 && !initialFetch) {
            return
        }
        console.log({ latestOp, initialFetch })
        setInitialFetch(false)
        const sent: string[] = []
        nostrSource.forEach(source => {
            if (sent.find(s => s === source.pasteField)) {
                return
            }
            sent.push(source.pasteField)
            getNostrClient(source.pasteField).then(c => {
                const req = populateCursorRequest(cursor)
                c.GetUserOperations(req).then(ops => {
                    if (ops.status === 'OK') {
                        console.log(ops)
                        dispatch(setSourceHistory({ nprofile: source.pasteField, ...parseOperationsResponse(ops) }))
                    } else {
                        console.log(ops.reason)
                    }
                })
            })
        })
    }, [latestOp, initialFetch])
    return <></>
}

const populateCursorRequest = (p: Partial<Types.GetUserOperationsRequest>): Types.GetUserOperationsRequest => {
    return {
        latestIncomingInvoice: p.latestIncomingInvoice || 0,
        latestOutgoingInvoice: p.latestOutgoingInvoice || 0,
        latestIncomingTx: p.latestIncomingTx || 0,
        latestOutgoingTx: p.latestOutgoingTx || 0,
        latestIncomingUserToUserPayment: p.latestIncomingUserToUserPayment || 0,
        latestOutgoingUserToUserPayment: p.latestOutgoingUserToUserPayment || 0,
    }
}

const parseOperationsResponse = (r: Types.GetUserOperationsResponse): { cursor: Types.GetUserOperationsRequest, operations: Types.UserOperation[] } => {
    const cursor = {
        latestIncomingInvoice: r.latestIncomingInvoiceOperations.toIndex,
        latestOutgoingInvoice: r.latestOutgoingInvoiceOperations.toIndex,
        latestIncomingTx: r.latestIncomingTxOperations.toIndex,
        latestOutgoingTx: r.latestOutgoingTxOperations.toIndex,
        latestIncomingUserToUserPayment: r.latestIncomingUserToUserPayemnts.toIndex,
        latestOutgoingUserToUserPayment: r.latestOutgoingUserToUserPayemnts.toIndex,
    }
    const operations = [
        ...r.latestIncomingInvoiceOperations.operations,
        ...r.latestOutgoingInvoiceOperations.operations,
        ...r.latestIncomingTxOperations.operations,
        ...r.latestOutgoingTxOperations.operations,
        ...r.latestIncomingUserToUserPayemnts.operations,
        ...r.latestOutgoingUserToUserPayemnts.operations,
    ]
    console.log({ operations })
    return { cursor, operations }
}
